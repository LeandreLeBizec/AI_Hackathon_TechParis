#!/usr/bin/env python3
"""
Transcript Reader for HR Interview Analysis
This script demonstrates how to read and process the transcript files
generated by the LiveKit agent for HR interview evaluation.
"""

import json
import os
from datetime import datetime
from typing import List, Dict, Any

class TranscriptAnalyzer:
    def __init__(self, transcripts_dir: str = "transcripts"):
        self.transcripts_dir = transcripts_dir
    
    def read_realtime_transcript(self, filepath: str) -> List[Dict[str, Any]]:
        """Read a real-time transcript file (.jsonl format)"""
        messages = []
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                for line in f:
                    data = json.loads(line.strip())
                    if data.get('type') == 'message':
                        messages.append(data)
            return messages
        except Exception as e:
            print(f"Error reading realtime transcript {filepath}: {e}")
            return []
    
    def read_final_transcript(self, filepath: str) -> Dict[str, Any]:
        """Read a final transcript file (.json format)"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"Error reading final transcript {filepath}: {e}")
            return {}
    
    def list_transcript_files(self) -> Dict[str, List[str]]:
        """List all transcript files in the directory"""
        if not os.path.exists(self.transcripts_dir):
            return {"realtime": [], "final": []}
        
        files = os.listdir(self.transcripts_dir)
        realtime_files = [f for f in files if f.startswith("realtime_") and f.endswith(".jsonl")]
        final_files = [f for f in files if f.startswith("final_transcript_") and f.endswith(".json")]
        
        return {
            "realtime": sorted(realtime_files),
            "final": sorted(final_files)
        }
    
    def analyze_interview(self, room_name: str) -> Dict[str, Any]:
        """Analyze an interview transcript for HR evaluation"""
        files = self.list_transcript_files()
        
        # Find files for this room
        room_files = {
            "realtime": [f for f in files["realtime"] if room_name in f],
            "final": [f for f in files["final"] if room_name in f]
        }
        
        if not room_files["realtime"] and not room_files["final"]:
            return {"error": f"No transcript files found for room: {room_name}"}
        
        analysis = {
            "room_name": room_name,
            "analysis_timestamp": datetime.now().isoformat(),
            "files_analyzed": room_files,
            "statistics": {},
            "conversation_flow": [],
            "key_insights": []
        }
        
        # Analyze real-time transcript if available
        if room_files["realtime"]:
            latest_realtime = room_files["realtime"][-1]  # Get the latest file
            filepath = os.path.join(self.transcripts_dir, latest_realtime)
            messages = self.read_realtime_transcript(filepath)
            
            # Calculate statistics
            user_messages = [m for m in messages if m.get('role') == 'user']
            agent_messages = [m for m in messages if m.get('role') == 'assistant']
            
            analysis["statistics"] = {
                "total_messages": len(messages),
                "user_messages": len(user_messages),
                "agent_messages": len(agent_messages),
                "conversation_duration": self._calculate_duration(messages),
                "average_response_time": self._calculate_avg_response_time(messages)
            }
            
            # Extract conversation flow
            analysis["conversation_flow"] = [
                {
                    "timestamp": msg.get("timestamp"),
                    "role": msg.get("role"),
                    "content": msg.get("content", "")[:100] + "..." if len(msg.get("content", "")) > 100 else msg.get("content", "")
                }
                for msg in messages
            ]
            
            # Generate insights
            analysis["key_insights"] = self._generate_insights(user_messages, agent_messages)
        
        return analysis
    
    def _calculate_duration(self, messages: List[Dict]) -> str:
        """Calculate conversation duration"""
        if len(messages) < 2:
            return "0 minutes"
        
        try:
            start_time = datetime.fromisoformat(messages[0]["timestamp"])
            end_time = datetime.fromisoformat(messages[-1]["timestamp"])
            duration = end_time - start_time
            return f"{duration.total_seconds() / 60:.1f} minutes"
        except:
            return "Unknown"
    
    def _calculate_avg_response_time(self, messages: List[Dict]) -> str:
        """Calculate average response time between user and agent"""
        response_times = []
        
        for i in range(len(messages) - 1):
            current_msg = messages[i]
            next_msg = messages[i + 1]
            
            if (current_msg.get('role') == 'user' and 
                next_msg.get('role') == 'assistant'):
                try:
                    current_time = datetime.fromisoformat(current_msg["timestamp"])
                    next_time = datetime.fromisoformat(next_msg["timestamp"])
                    response_time = (next_time - current_time).total_seconds()
                    response_times.append(response_time)
                except:
                    continue
        
        if response_times:
            avg_time = sum(response_times) / len(response_times)
            return f"{avg_time:.1f} seconds"
        return "Unknown"
    
    def _generate_insights(self, user_messages: List[Dict], agent_messages: List[Dict]) -> List[str]:
        """Generate basic insights from the conversation"""
        insights = []
        
        if user_messages:
            avg_user_length = sum(len(msg.get('content', '')) for msg in user_messages) / len(user_messages)
            insights.append(f"Average user response length: {avg_user_length:.0f} characters")
        
        if agent_messages:
            avg_agent_length = sum(len(msg.get('content', '')) for msg in agent_messages) / len(agent_messages)
            insights.append(f"Average agent response length: {avg_agent_length:.0f} characters")
        
        if len(user_messages) > 0 and len(agent_messages) > 0:
            ratio = len(user_messages) / len(agent_messages)
            if ratio > 1.5:
                insights.append("User was very talkative - high engagement")
            elif ratio < 0.5:
                insights.append("User responses were brief - may indicate nervousness or disengagement")
            else:
                insights.append("Balanced conversation flow")
        
        return insights
    
    def export_analysis_report(self, room_name: str, output_file: str = None) -> str:
        """Export a comprehensive analysis report"""
        analysis = self.analyze_interview(room_name)
        
        if not output_file:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"interview_analysis_{room_name}_{timestamp}.json"
        
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(analysis, f, indent=2, ensure_ascii=False)
            
            print(f"Analysis report saved to: {output_file}")
            return output_file
        except Exception as e:
            print(f"Error saving analysis report: {e}")
            return ""

def main():
    """Example usage of the TranscriptAnalyzer"""
    analyzer = TranscriptAnalyzer()
    
    # List all available transcript files
    files = analyzer.list_transcript_files()
    print("Available transcript files:")
    print(f"Real-time: {files['realtime']}")
    print(f"Final: {files['final']}")
    
    # If you have transcript files, analyze them
    if files['realtime'] or files['final']:
        # Extract room name from first available file
        if files['realtime']:
            # Extract room name from filename like "realtime_room123_20240101_120000.jsonl"
            filename = files['realtime'][0]
            parts = filename.replace('realtime_', '').replace('.jsonl', '').split('_')
            room_name = '_'.join(parts[:-2])  # Remove timestamp parts
        else:
            filename = files['final'][0]
            parts = filename.replace('final_transcript_', '').replace('.json', '').split('_')
            room_name = '_'.join(parts[:-2])  # Remove timestamp parts
        
        print(f"\nAnalyzing interview for room: {room_name}")
        analysis = analyzer.analyze_interview(room_name)
        
        if "error" not in analysis:
            print(f"Statistics: {analysis['statistics']}")
            print(f"Key Insights: {analysis['key_insights']}")
            
            # Export full report
            report_file = analyzer.export_analysis_report(room_name)
            print(f"Full analysis report: {report_file}")
        else:
            print(f"Error: {analysis['error']}")
    else:
        print("No transcript files found. Run your agent first to generate transcripts.")

if __name__ == "__main__":
    main() 